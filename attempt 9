import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class SwingAc1 extends JPanel implements ActionListener, MouseListener {
	private static final long serialVersionUID = 1L; 
	public static int width = 520, height = width; 
	public static final int tileSize = width/8; 
	public static final int numTilesPerRow = width /tileSize;
	public static int[][] baseGameData = new int[numTilesPerRow][numTilesPerRow]; 
	public static int[][] gameData = new int[numTilesPerRow][numTilesPerRow]; 
	public static final int EMPTY = 0, YELLOW = 1, YELLOW_KING = 2, WHITE = 3, WHITE_KING = 4; 
	public static JFrame frame;
	public boolean gameInProgress = true;
	public int currentPlayer = YELLOW;
	public boolean inPlay = false;
	public static int[][] availablePlays = new int[numTilesPerRow][numTilesPerRow];
	public int storedRow, storedCol;
	public boolean isJump = false;
	static BufferedImage crownImage = null;
	public static int yellowScore = 0;
	public static int whiteScore = 0;
	private Timer timer;
	private int yellowTime = 60;
	private int whiteTime = 60;
	private JButton startOverButton;
	
	public static void main(String[] args){
		try {
			crownImage = ImageIO.read(new File("C:\\checkers\\checkers\\Checkers\\src\\checkers\\crown.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		new SwingAc1();
	}
	
	public SwingAc1() {
		yellowScore = 0;
		whiteScore = 0;
		yellowTime = 60;
		whiteTime = 60;
		
		timer = new Timer(1000, e -> {
			if (currentPlayer == YELLOW) {
				yellowTime--;
				if (yellowTime <= 0) {
					timer.stop();
					whiteScore++;
					showGameOverMessage("White", yellowScore, whiteScore);
				}
			} else {
				whiteTime--;
				if (whiteTime <= 0) {
					timer.stop();
					yellowScore++;
					showGameOverMessage("Yellow", yellowScore, whiteScore);
				}
			}
			repaint();
		});
		timer.start();
		
		window(width, height, this);
		initializeBoard();
		startOverButton = new JButton("Play Again");
		startOverButton.addActionListener(this);
		repaint();
	}
	
	public void playAgain() {
		if (inPlay) {
			resetPlay();
		}
		// Reset the game board and scores
		initializeBoard();
		yellowScore = 0;
		whiteScore = 0;
		
		// Reset timers
		yellowTime = 60;
		whiteTime = 60;
		gameInProgress = true;
		timer.restart();
		
		// Reset current player to YELLOW
		currentPlayer = YELLOW;
		inPlay = false;
		isJump = false;
		
		// Clear any available plays
		for (int i = 0; i < numTilesPerRow; i++) {
			for (int j = 0; j < numTilesPerRow; j++) {
				availablePlays[i][j] = 0;
			}
		}
		
		// Repaint the board
		repaint();
	}
	
	public void swapPlayer() {
		if(currentPlayer == YELLOW) {
			currentPlayer = WHITE;
		} else {
			currentPlayer = YELLOW;
		}
		// Reset the timer for the new player
		if(currentPlayer == YELLOW) {
			yellowTime = 60;
		} else {
			whiteTime = 60;
		}
		repaint();
	}

    public boolean gameOver() {
    int yellowCount = 0;
    int whiteCount = 0;

    for (int row = 0; row < numTilesPerRow; row++) {
        for (int col = 0; col < numTilesPerRow; col++) {
            if (gameData[col][row] == YELLOW || gameData[col][row] == YELLOW_KING) {
                yellowCount++;
            } else if (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING) {
                whiteCount++;
            }
        }
    }

    if (yellowCount == 0 || whiteCount == 0) {
        showGameOverMessage("Yellow", yellowCount, whiteCount);
        return true;
    } else if (yellowCount == 0 || whiteCount == 0){
        showGameOverMessage("White", yellowCount, whiteCount);
        return true;
    }else {
        return false;
    }
}

private void showGameOverMessage(String winner, int yellowScore, int whiteScore) {
		gameInProgress = false;
		timer.stop();
		String message = String.format("%s wins!\nFinal Score:\nYellow: %d\nWhite: %d", 
			winner, yellowScore, whiteScore);
		
		int choice = JOptionPane.showConfirmDialog(
			this,
			message + "\nWould you like to play again?",
			"Game Over",
			JOptionPane.YES_NO_OPTION,
			JOptionPane.INFORMATION_MESSAGE
		);
		
		if (choice == JOptionPane.YES_OPTION) {
			playAgain();
		} else {
			System.exit(0);
		}
	}
	
	public void gameOverDisplay(Graphics g) { 
		 String msg = "Game Over";
	     Font small = new Font("Helvetica", Font.BOLD, 20);
	     FontMetrics metr = getFontMetrics(small);
	     g.setColor(Color.WHITE);
	     g.setFont(small);
	     g.drawString(msg, (width - metr.stringWidth(msg)) / 2, width / 2);
	}
	
	public void resetPlay(){
		storedCol = 0;
		storedRow = 0;
		inPlay = false;
		isJump = false;
		for(int row = 0; row < numTilesPerRow; row++){
			for(int col = 0; col < numTilesPerRow; col++){
				availablePlays[col][row] = 0;
			}
		}
		repaint();
	}
	
        @Override
	public void mousePressed(java.awt.event.MouseEvent evt) {
		// Adjust for score panel offset
		int col = evt.getX() / tileSize;
		int row = (evt.getY() - 60) / tileSize; 
		
		// Ignore clicks outside the board
		if (row < 0 || row >= numTilesPerRow || col < 0 || col >= numTilesPerRow) {
			return;
		}
		
		// Selecting a piece
		if (!inPlay && gameData[col][row] != EMPTY && isCurrentPlayersPiece(col, row)) {
			selectPiece(col, row);
		}
		// Moving to an available spot
		else if (inPlay && availablePlays[col][row] == 1) {
			makeMove(col, row, storedCol, storedRow);
		}
		// Clicking an invalid spot
		else if (inPlay) {
			resetPlay();
		}
	}
	
	private boolean isCurrentPlayersPiece(int col, int row) {
		int piece = gameData[col][row];
		return (currentPlayer == YELLOW && (piece == YELLOW || piece == YELLOW_KING)) ||
			   (currentPlayer == WHITE && (piece == WHITE || piece == WHITE_KING));
	}
	
	private void selectPiece(int col, int row) {
		resetPlay();
		storedCol = col;
		storedRow = row;
		inPlay = true;
		getAvailablePlays(col, row);
		repaint();
	}
	
	public void makeMove(int col, int row, int storedCol, int storedRow){
		// Move the piece
		gameData[col][row] = gameData[storedCol][storedRow];
		gameData[storedCol][storedRow] = EMPTY;
		
		boolean wasJump = Math.abs(col - storedCol) == 2;
		if (wasJump) {
			// Remove the jumped piece
			removePiece(col, row, storedCol, storedRow);
			
			// Check for additional jumps from the new position
			if (hasAdditionalJumps(col, row)) {
				// Continue the turn with the same piece
				storedCol = col;
				storedRow = row;
				getAvailablePlays(col, row);
				// Only show jump moves
				filterNonJumpMoves();
				repaint();
				return; // Don't end turn yet
			}
		}
		
		// Check for king promotion
		checkKing(col, row);
		
		// End turn
		resetPlay();
		swapPlayer();
		repaint();
	}
	
	private void filterNonJumpMoves() {
		for (int i = 0; i < numTilesPerRow; i++) {
			for (int j = 0; j < numTilesPerRow; j++) {
				if (availablePlays[i][j] == 1) {
					// If this move is not a jump, remove it
					if (Math.abs(i - storedCol) != 2) {
						availablePlays[i][j] = 0;
					}
				}
			}
		}
	}
	
	private boolean hasAdditionalJumps(int col, int row) {
		// Store current state
		boolean hasJumps = false;
		
		// Check for possible jumps
		if (row >= 2) {
			// Check jumps up-left
			if (col >= 2 && canJumpInDirection(col, row, -1, -1)) {
				hasJumps = true;
			}
			// Check jumps up-right
			if (col <= numTilesPerRow-3 && canJumpInDirection(col, row, 1, -1)) {
				hasJumps = true;
			}
		}
		
		if (row <= numTilesPerRow-3) {
			// Check jumps down-left
			if (col >= 2 && canJumpInDirection(col, row, -1, 1)) {
				hasJumps = true;
			}
			// Check jumps down-right
			if (col <= numTilesPerRow-3 && canJumpInDirection(col, row, 1, 1)) {
				hasJumps = true;
			}
		}
		
		return hasJumps;
	}
	
	public boolean isKing(int col, int row){
            return gameData[col][row] == YELLOW_KING || gameData[col][row] == WHITE_KING;
	}
	
	public int checkOpponent(int col, int row){
		if(gameData[col][row] == YELLOW || gameData[col][row] ==  YELLOW_KING)
			return WHITE;
		else
			return YELLOW;
	}
	
	public void checkExtraJumps(int col, int row){
		int opponent = checkOpponent(col, row);
		int opponentKing = checkOpponent(col, row) + 1;
		if(gameData[col-1][row-1] == opponent || gameData[col-1][row-1] == opponentKing){
			availablePlays[col-1][row-1] = 1;
		}
		else if(gameData[col+1][row-1] == opponent || gameData[col+1][row-1] == opponentKing){
			availablePlays[col+1][row-1] = 1;
		}
		else if(gameData[col-1][row+1] == opponent || gameData[col-1][row+1] == opponentKing){
			availablePlays[col-1][row+1] = 1;
		}
		else if(gameData[col+1][row+1] == opponent || gameData[col+1][row+1] == opponentKing){
			availablePlays[col+1][row+1] = 1;
		}
		repaint();
	}
	
	public void checkKing(int col, int row){
		if(gameData[col][row] == YELLOW && row == 0)
			gameData[col][row] = YELLOW_KING;
		else if(gameData[col][row] == WHITE && row == numTilesPerRow-1)
			gameData[col][row] = WHITE_KING;
		else {
                }
	}
	
	public void removePiece(int col, int row, int storedCol, int storedRow){
		// Calculate the position of the piece to be removed
		int removedCol = (col + storedCol) / 2;
		int removedRow = (row + storedRow) / 2;
		
		// Update scores based on the piece being captured
		if (gameData[removedCol][removedRow] == WHITE || gameData[removedCol][removedRow] == WHITE_KING) {
			yellowScore++;
		} else if (gameData[removedCol][removedRow] == YELLOW || gameData[removedCol][removedRow] == YELLOW_KING) {
			whiteScore++;
		}
		
		// Remove the piece
		gameData[removedCol][removedRow] = EMPTY;
		repaint(); // Ensure the display updates
	}//TODO REWRITE
	
	public void getAvailablePlays(int col, int row) {
		if (!isCurrentPlayersPiece(col, row)) {
			return;
		}
		
		inPlay = true;
		boolean isKing = isKing(col, row);
		int piece = gameData[col][row];
		
		// Clear previous available plays
		for (int i = 0; i < numTilesPerRow; i++) {
			for (int j = 0; j < numTilesPerRow; j++) {
				availablePlays[i][j] = 0;
			}
		}
		
		// Check for jumps first
		boolean hasJumps = checkJumps(col, row, piece == YELLOW || isKing, piece == WHITE || isKing);
		
		// If no jumps are available, check for regular moves
		if (!hasJumps) {
			checkRegularMoves(col, row, piece == YELLOW || isKing, piece == WHITE || isKing);
		}
		
		repaint();
	}
	
	private boolean checkJumps(int col, int row, boolean checkUp, boolean checkDown) {
		boolean hasJumps = false;
		
		if (checkUp && row >= 2) {
			// Check jumps up-left
			if (col >= 2 && canJumpInDirection(col, row, -1, -1)) {
				availablePlays[col-2][row-2] = 1;
				hasJumps = true;
			}
			// Check jumps up-right
			if (col <= numTilesPerRow-3 && canJumpInDirection(col, row, 1, -1)) {
				availablePlays[col+2][row-2] = 1;
				hasJumps = true;
			}
		}
		
		if (checkDown && row <= numTilesPerRow-3) {
			// Check jumps down-left
			if (col >= 2 && canJumpInDirection(col, row, -1, 1)) {
				availablePlays[col-2][row+2] = 1;
				hasJumps = true;
			}
			// Check jumps down-right
			if (col <= numTilesPerRow-3 && canJumpInDirection(col, row, 1, 1)) {
				availablePlays[col+2][row+2] = 1;
				hasJumps = true;
			}
		}
		
		return hasJumps;
	}
	
	private boolean canJumpInDirection(int col, int row, int deltaCol, int deltaRow) {
		int jumpedCol = col + deltaCol;
		int jumpedRow = row + deltaRow;
		int targetCol = col + (2 * deltaCol);
		int targetRow = row + (2 * deltaRow);
		
		// Check if target square is empty
		if (gameData[targetCol][targetRow] != EMPTY) {
			return false;
		}
		
		// Check if jumped piece is opponent's
		int jumpedPiece = gameData[jumpedCol][jumpedRow];
		if (currentPlayer == YELLOW) {
			return jumpedPiece == WHITE || jumpedPiece == WHITE_KING;
		} else {
			return jumpedPiece == YELLOW || jumpedPiece == YELLOW_KING;
		}
	}
	
	private void checkRegularMoves(int col, int row, boolean checkUp, boolean checkDown) {
		if (checkUp && row > 0) {
			// Check moves up-left
			if (col > 0 && gameData[col-1][row-1] == EMPTY) {
				availablePlays[col-1][row-1] = 1;
			}
			// Check moves up-right
			if (col < numTilesPerRow-1 && gameData[col+1][row-1] == EMPTY) {
				availablePlays[col+1][row-1] = 1;
			}
		}
		
		if (checkDown && row < numTilesPerRow-1) {
			// Check moves down-left
			if (col > 0 && gameData[col-1][row+1] == EMPTY) {
				availablePlays[col-1][row+1] = 1;
			}
			// Check moves down-right
			if (col < numTilesPerRow-1 && gameData[col+1][row+1] == EMPTY) {
				availablePlays[col+1][row+1] = 1;
			}
		}
	}	
	
	public boolean checkTeamPiece(int col, int row){
		if(currentPlayer == YELLOW && (gameData[col][row] == YELLOW || gameData[col][row] == YELLOW_KING)) 
			return true;
            return currentPlayer == WHITE && (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING); 
	}
	
	public boolean isLegalPos(int col, int row){
            return !(row < 0 || row >= numTilesPerRow || col < 0 || col >= numTilesPerRow);
	}
	
	public boolean canJump(int col, int row, int opponentCol, int opponentRow){
		//Steps for checking if canJump is true: determine piece within movement. Then check if its an opponent piece, then if the space behind it is empty
		//and in bounds
		// 4 conditions based on column and row relations to the other piece
		if(((gameData[col][row] == YELLOW || gameData[col][row] == YELLOW_KING) && (gameData[opponentCol][opponentRow] == WHITE || gameData[opponentCol][opponentRow] == WHITE_KING)) || (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING) && (gameData[opponentCol][opponentRow] == YELLOW || gameData[opponentCol][opponentRow] == YELLOW_KING)){ 
			//If the piece is white/YELLOW and opponent piece is opposite TODO fix this if. It's so ugly
			if(opponentCol == 0 || opponentCol == numTilesPerRow-1 || opponentRow == 0 || opponentRow == numTilesPerRow-1)
				return false;
			int[] toData = getJumpPos(col, row, opponentCol, opponentRow);
		    if(isLegalPos(toData[0],toData[1]) == false) 
		        return false;
		    if(gameData[toData[0]][toData[1]] == 0){
		    	isJump = true;
		    	return true;
		    }
		}
		return false;
	}
	
	public int[] getJumpPos(int col, int row, int opponentCol, int opponentRow){
		if(col > opponentCol && row > opponentRow && gameData[col-2][row-2] == 0)
			return new int[] {col-2, row-2};
		else if(col > opponentCol && row < opponentRow && gameData[col-2][row+2] == 0)
			return new int[] {col-2, row+2};
		else if(col < opponentCol && row > opponentRow && gameData[col+2][row-2] == 0)
			return new int[] {col+2, row-2};
		else
			return new int[] {col+2, row+2};
	}
	
	// Methods that must be included for some reason? WHY
        @Override
	public void mouseClicked(MouseEvent e) {}
        @Override
	public void mouseReleased(MouseEvent e) {}
        @Override
	public void mouseEntered(MouseEvent e) {}
        @Override
	public void mouseExited(MouseEvent e) {}

	private void checkForWinner() {
    int yellowCount = 0;
    int whiteCount = 0;

    for (int row = 0; row < numTilesPerRow; row++) {
        for (int col = 0; col < numTilesPerRow; col++) {
            if (gameData[col][row] == YELLOW || gameData[col][row] == YELLOW_KING) {
                yellowCount++;
            } else if (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING) {
                whiteCount++;
            }
        }
    }

    if (yellowCount == 0 || whiteCount == 0) {
        // Update scores only when the game is over
        if (yellowCount == 0) {
            whiteScore++;
        } else if (whiteCount == 0) {
            yellowScore++;
        }

        // Show the game-over message with scores
        showGameOverMessage((yellowCount == 0) ? "White" : "Yellow", yellowScore, whiteScore);
    }
}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == startOverButton) {
			System.out.println("Play Again button clicked");
			playAgain(); 
		}
	}
	
	public void window(int width, int height, SwingAc1 game){ 
		JFrame frame = new JFrame("Checkers");
		frame.setIconImage(crownImage);
		frame.setBackground(Color.white);
		
		// Set the game panel's preferred size - add extra height for score panel
		game.setPreferredSize(new Dimension(width, height + 60));
		
		// Add the game panel to the frame
		frame.add(game);
		
		// Pack the frame to fit the preferred size
		frame.pack();
		
		// Center the frame on screen
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		
		// Add mouse listener to the game panel, not the frame
		game.addMouseListener(this);
		game.requestFocus();
		
		// Make the frame visible
		frame.setVisible(true);
	}
	
	public void initializeBoard() {
		// Clear the board first
		for(int row = 0; row < numTilesPerRow; row++) {
			for(int col = 0; col < numTilesPerRow; col++) {
				gameData[col][row] = EMPTY;
			}
		}
		
		// Initialize White pieces (top)
		for(int row = 0; row < 3; row++) {
			for(int col = 0; col < numTilesPerRow; col++) {
				if((row % 2 == 0 && col % 2 == 1) || (row % 2 == 1 && col % 2 == 0)) {
					gameData[col][row] = WHITE;
				}
			}
		}
		
		// Initialize Yellow pieces (bottom)
		for(int row = 5; row < 8; row++) {
			for(int col = 0; col < numTilesPerRow; col++) {
				if((row % 2 == 0 && col % 2 == 1) || (row % 2 == 1 && col % 2 == 0)) {
					gameData[col][row] = YELLOW;
				}
			}
		}
	}
	
    @Override
	protected void paintComponent(Graphics g){ 
		//PRINT THE BOARD & PIECES
		super.paintComponent(g);
		
		// Draw score panel
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, width, 60);
		g.drawRect(0, 0, width-1, 59);
		
		// Draw scores and timers
		g.setFont(new Font("Arial", Font.BOLD, 20));
		
		// Draw Yellow's info
		g.setColor(Color.ORANGE);
		String yellowText = String.format("Yellow: %d [%02d:%02d]", yellowScore, yellowTime / 60, yellowTime % 60);
		g.drawString(yellowText, 20, 35);
		
		// Draw White's info
		g.setColor(Color.WHITE);
		String whiteText = String.format("White: %d [%02d:%02d]", whiteScore, whiteTime / 60, whiteTime % 60);
		int whiteWidth = g.getFontMetrics().stringWidth(whiteText);
		g.drawString(whiteText, width - whiteWidth - 20, 35);
		
		// Draw current turn indicator
		String turnText = currentPlayer == YELLOW ? "Yellow's Turn" : "White's Turn";
		g.setColor(currentPlayer == YELLOW ? Color.ORANGE : Color.WHITE);
		int turnWidth = g.getFontMetrics().stringWidth(turnText);
		g.drawString(turnText, (width - turnWidth) / 2, 35);
		
		// Offset the board to make room for the score panel
		g.translate(0, 60);
		
		// Draw the board
		for(int row = 0; row < numTilesPerRow; row++){
			for(int col = 0; col < numTilesPerRow; col++){
				if((row%2 == 0 && col%2 == 0) || (row%2 != 0 && col%2 != 0)){ 
					baseGameData[col][row] = 0;
					g.setColor(Color.lightGray);
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				else{
					baseGameData[col][row] = 1;
					g.setColor(Color.darkGray);
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				if(checkTeamPiece(col, row) ==  true){			
					g.setColor(Color.darkGray.darker());
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				if(availablePlays[col][row] == 1){
					g.setColor(Color.CYAN.darker());
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				switch (gameData[col][row]) {
					case WHITE -> drawPiece(col, row, g, Color.WHITE);
					case WHITE_KING -> {
						drawPiece(col, row, g, Color.WHITE);
						g.drawImage(crownImage, (col*tileSize)+6, (row*tileSize)+6, tileSize-12, tileSize-12, null);
					}
					case YELLOW -> drawPiece(col, row, g, Color.ORANGE);
					case YELLOW_KING -> {
						drawPiece(col, row, g, Color.ORANGE);
						g.drawImage(crownImage, (col*tileSize)+6, (row*tileSize)+6, tileSize-12, tileSize-12, null);
					}
					default -> {
					}
				}
			}
		}
		
		// Reset the translation
		g.translate(0, -60);
		
		if (gameOver()) {
			gameOverDisplay(g);
			checkForWinner();
		}
	}
	
	public static void drawPiece(int col, int row, Graphics g, Color color){
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		g2d.setColor(color);
		// These 2 and 4 values are arbitrary values that compensate for a smaller piece size than tileSize
		g2d.fillOval((col*tileSize)+2, (row*tileSize)+2, tileSize-4, tileSize-4);
	}
}
