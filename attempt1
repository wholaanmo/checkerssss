package SwingAc1;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.io.*;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class SwingAc1 extends JPanel implements ActionListener, MouseListener {
    private static final long serialVersionUID = 1L;
    public static int width = 520, height = width; // Square parameters
    public static final int tileSize = width / 8; // 8 tiles for checkers board
    public static final int numTilesPerRow = width / tileSize;
    public static int[][] baseGameData = new int[numTilesPerRow][numTilesPerRow]; // Stores 8x8 board layout
    public static int[][] gameData = new int[numTilesPerRow][numTilesPerRow]; // Stores piece data in an 8x8
    public static final int EMPTY = 0, RED = 1, RED_KING = 2, WHITE = 3, WHITE_KING = 4; // Values for gameData
    public static JFrame frame;
    public boolean gameInProgress = true;
    public int currentPlayer = RED;
    public boolean inPlay = false; // Is there a move function processing?
    public static int[][] availablePlays = new int[numTilesPerRow][numTilesPerRow]; // Stores available plays
    public int storedRow, storedCol;
    public boolean isJump = false;
    static BufferedImage crownImage = null;
    private static final int BOARD_SIZE = 8;

    public static int redScore = 0;
    public static int whiteScore = 0;

    private Timer timer;
    private int timeRemaining = 60; // Time in seconds
    private boolean timerRunning = false;
    private JLabel timeLabel; // Label to display time
    private JButton startOverButton;

    public static void main(String[] args) {
        try {
            crownImage = ImageIO.read(new File("C:\\Users\\63910\\OneDrive\\Documents\\NetBeansProjects\\Checkers\\crown.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        new SwingAc1();
    }

    public SwingAc1() {
        window(width, height, this);
        initializeBoard();
        repaint();

        // Create "Start Over" button
        startOverButton = new JButton("Play Again");
        startOverButton.addActionListener(this);

        // Add time label to display remaining time
        timeLabel = new JLabel("Time remaining: " + timeRemaining + " seconds");
        timeLabel.setBounds(10, 10, 200, 30);
        timeLabel.setFont(new Font("Arial", Font.BOLD, 14));
        add(timeLabel); // Add this label to your JPanel
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == startOverButton) {
            System.out.println("Play Again button clicked");
            playAgain(); // Rename the method to playAgain
        }
    }

    public void playAgain() {
        if (inPlay) {
            resetPlay();
        } else {
            storedCol = 0;
            storedRow = 0;
            inPlay = true;
            isJump = false;

            // Clear the last moved piece
            gameData[storedCol][storedRow] = EMPTY;

            // Reset the game board and scores
            initializeBoard();
            redScore = 0;
            whiteScore = 0;

            // Set the current player to RED
            currentPlayer = RED;

            // Start the timer
            startTimer();

            // Repaint the board
            repaint();

            // Show a message indicating the game has started over
            SwingUtilities.invokeLater(() -> {
                JOptionPane.showMessageDialog(this, "Game has started over!", "New Game", JOptionPane.INFORMATION_MESSAGE);
            });
        }
    }

    public boolean gameOver() {
        int redCount = 0;
        int whiteCount = 0;

        for (int row = 0; row < numTilesPerRow; row++) {
            for (int col = 0; col < numTilesPerRow; col++) {
                if (gameData[col][row] == RED || gameData[col][row] == RED_KING) {
                    redCount++;
                } else if (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING) {
                    whiteCount++;
                }
            }
        }

        if (redCount == 0 || whiteCount == 0) {
            showGameOverMessage("Red", redCount, whiteCount);
            if (timerRunning) {
                timer.stop(); // Stop the timer when the game ends
            }
            return true;
        }

        return false;
    }

    private void showGameOverMessage(String winner, int redScore, int whiteScore) {
        SwingUtilities.invokeLater(() -> {
            JOptionPane.showMessageDialog(this, winner + " wins!\nScore: " + redScore + " - " + whiteScore, "Game Over", JOptionPane.INFORMATION_MESSAGE);
            askForRestart();
        });
    }

    private boolean restartDialogShown = false;

    private void askForRestart() {
        if (!restartDialogShown) {
            restartDialogShown = true;

            int result = JOptionPane.showConfirmDialog(this, "Do you want to start over?", "Restart", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                playAgain();
            } else {
                JOptionPane.showMessageDialog(this, "Thanks for playing! Goodbye!", "Exit", JOptionPane.INFORMATION_MESSAGE);
                System.exit(0); // Terminate the program
            }
        }
    }

    private void startTimer() {
        timerRunning = true;

        // Create a timer that runs every second (1000 milliseconds)
        timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (timeRemaining > 0) {
                    timeRemaining--; // Decrease time by one second
                    timeLabel.setText("Time remaining: " + timeRemaining + " seconds"); // Update the label
                    repaint();
                } else {
                    // Time is up! Handle the timeout.
                    timer.stop(); // Stop the timer
                    timerRunning = false;
                    handleTimeout();
                }
            }
        });
        timer.start(); // Start the timer
    }

    private void handleTimeout() {
        // Example: Notify the user that time is up
        JOptionPane.showMessageDialog(this, "Time is up! It's the next player's turn.", "Time Over", JOptionPane.WARNING_MESSAGE);

        // Swap the player (optional)
        swapPlayer();

        // Reset the time for the next round
        timeRemaining = 60;  // Reset timer to 60 seconds
        timeLabel.setText("Time remaining: " + timeRemaining + " seconds");  // Update the display
    }

    public void swapPlayer() {
        if (currentPlayer == RED) {
            currentPlayer = WHITE;
        } else {
            currentPlayer = RED;
        }
    }

    public void window(int width, int height, SwingAc1 game) {
        JFrame frame = new JFrame();
        frame.setSize(width, height);
        frame.setIconImage(crownImage);
        frame.setBackground(Color.cyan);
        frame.setLocationRelativeTo(null);
        frame.pack();
        Insets insets = frame.getInsets();
        int frameLeftBorder = insets.left;
        int frameRightBorder = insets.right;
        int frameTopBorder = insets.top;
        int frameBottomBorder = insets.bottom;
        frame.setPreferredSize(new Dimension(width + frameLeftBorder + frameRightBorder, height + frameBottomBorder + frameTopBorder));
        frame.setMaximumSize(new Dimension(width + frameLeftBorder + frameRightBorder, height + frameBottomBorder + frameTopBorder));
        frame.setMinimumSize(new Dimension(width + frameLeftBorder + frameRightBorder, height + frameBottomBorder + frameTopBorder));
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addMouseListener(this);
        frame.requestFocus();
        frame.setVisible(true);
        frame.add(game);
    }

    public void initializeBoard() {
        // UPDATE THE STARTING POSITIONS
        for (int col = 0; col < (numTilesPerRow); col += 2) {
            gameData[col][5] = RED;
            gameData[col][7] = RED;
        }
        for (int col = 1; col < (numTilesPerRow); col += 2)
            gameData[col][6] = RED;
        for (int col = 1; col < (numTilesPerRow); col += 2) {
            gameData[col][0] = WHITE;
            gameData[col][2] = WHITE;
        }
        for (int col = 0; col < (numTilesPerRow); col += 2)
            gameData[col][1] = WHITE;
    }

    public static void drawPiece(int col, int row, Graphics g, Color color) {
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g.setColor(color);
        g.fillOval((col * tileSize) + 10, (row * tileSize) + 10, tileSize - 20, tileSize - 20);
    }

	
        @Override
	public void paint(Graphics g){ // This method paints the board
		//PRINT THE BOARD & PIECES
		super.paintComponent(g);
                    g.setColor(Color.BLACK);
                    g.setFont(new Font("Arial", Font.BOLD, 20));
                    g.drawString("Time remaining: " + timeRemaining + "s", 10, 30);

		for(int row = 0; row < numTilesPerRow; row++){
			for(int col = 0; col < numTilesPerRow; col++){
				if((row%2 == 0 && col%2 == 0) || (row%2 != 0 && col%2 != 0)){ // This assigns the checkerboard pattern
					baseGameData[col][row] = 0;
					g.setColor(Color.gray);
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				else{
					baseGameData[col][row] = 1;
					g.setColor(Color.darkGray);
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				if(checkTeamPiece(col, row) ==  true){			
					g.setColor(Color.darkGray.darker());
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
				if(availablePlays[col][row] == 1){
					g.setColor(Color.CYAN.darker());
					g.fillRect(col*tileSize, row*tileSize, tileSize, tileSize);
				}
                                switch (gameData[col][row]) {
                                case WHITE -> drawPiece(col, row, g, Color.white);
                                case WHITE_KING -> {
                                    drawPiece(col, row, g, Color.white);
                                    g.drawImage(crownImage, (col*tileSize)+6, (row*tileSize)+6, tileSize-12, tileSize-12, null);
                                }
                                case RED -> drawPiece(col, row, g, Color.red);
                                case RED_KING -> {
                                    drawPiece(col, row, g, Color.red);
                                    g.drawImage(crownImage, (col*tileSize)+6, (row*tileSize)+6, tileSize-12, tileSize-12, null);
                                }
                                default -> {
                                }
                            }
			}
		}
		if (gameOver()) {
                 gameOverDisplay(g);
                   checkForWinner(); // Add this line to check for a winner when the game is over
                      }
    
                 }
	        private void checkForWinner() {
    int redCount = 0;
    int whiteCount = 0;

    for (int row = 0; row < numTilesPerRow; row++) {
        for (int col = 0; col < numTilesPerRow; col++) {
            if (gameData[col][row] == RED || gameData[col][row] == RED_KING) {
                redCount++;
            } else if (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING) {
                whiteCount++;
            }
        }
    }

    if (redCount == 0 || whiteCount == 0) {
        // Update scores only when the game is over
        if (redCount == 0) {
            whiteScore++;
        } else if (whiteCount == 0) {
            redScore++;
        }

        // Show the game-over message with scores
        showGameOverMessage((redCount == 0) ? "White" : "Red", redScore, whiteScore);
    }
}
        
	public void gameOverDisplay(Graphics g) { //Displays the game over message
		 String msg = "Game Over";
	     Font small = new Font("Helvetica", Font.BOLD, 20);
	     FontMetrics metr = getFontMetrics(small);
	     g.setColor(Color.white);
	     g.setFont(small);
	     g.drawString(msg, (width - metr.stringWidth(msg)) / 2, width / 2);
	}
	
	public void resetPlay(){
		storedCol = 0;
		storedRow = 0;
		inPlay = false;
		isJump = false;
		for(int row = 0; row < numTilesPerRow; row++){
			for(int col = 0; col < numTilesPerRow; col++){
				availablePlays[col][row] = 0;
			}
		}
		repaint();
	}
	
        @Override
	public void mousePressed(java.awt.event.MouseEvent evt) {
    	int col = (evt.getX()-8) / tileSize; // 8 is left frame length
        int row = (evt.getY()-30) / tileSize; // 30 is top frame length
		if(inPlay == false && gameData[col][row] != 0 || inPlay == true && checkTeamPiece(col, row) == true){
			resetPlay();
			storedCol = col;
			storedRow = row; // Sets the current click to instance variables to be used elsewhere
			getAvailablePlays(col, row);
		}
		else if(inPlay == true && availablePlays[col][row] == 1){
			makeMove(col, row, storedCol, storedRow);
		}
		else if(inPlay == true && availablePlays[col][row] == 0){
			resetPlay();
		}
	}
	
	public void swapPlayer1(){
		if(currentPlayer == RED)
			currentPlayer = WHITE;
		else currentPlayer = RED;
	}
	
	public void makeMove(int col, int row, int storedCol, int storedRow){
		int x = gameData[storedCol][storedRow]; //change the piece to new tile
		gameData[col][row] = x;
		gameData[storedCol][storedRow] = EMPTY; //change old piece location to EMPTY
		checkKing(col, row);
		if(isJump == true)
			removePiece(col, row, storedCol, storedRow);
		resetPlay();
		swapPlayer();
	}
	
	public boolean isKing(int col, int row){
            return gameData[col][row] == RED_KING || gameData[col][row] == WHITE_KING;
	}
	
	public int checkOpponent(int col, int row){
		if(gameData[col][row] == RED || gameData[col][row] ==  RED_KING)
			return WHITE;
		else
			return RED;
	}
	
	public void checkExtraJumps(int col, int row){
		int opponent = checkOpponent(col, row);
		int opponentKing = checkOpponent(col, row) + 1;
		if(gameData[col-1][row-1] == opponent || gameData[col-1][row-1] == opponentKing){
			availablePlays[col-1][row-1] = 1;
		}
		else if(gameData[col+1][row-1] == opponent || gameData[col+1][row-1] == opponentKing){
			availablePlays[col+1][row-1] = 1;
		}
		else if(gameData[col-1][row+1] == opponent || gameData[col-1][row+1] == opponentKing){
			availablePlays[col-1][row+1] = 1;
		}
		else if(gameData[col+1][row+1] == opponent || gameData[col+1][row+1] == opponentKing){
			availablePlays[col+1][row+1] = 1;
		}
		repaint();
	}
	
	public void checkKing(int col, int row){
		if(gameData[col][row] == RED && row == 0)
			gameData[col][row] = RED_KING;
		else if(gameData[col][row] == WHITE && row == numTilesPerRow-1)
			gameData[col][row] = WHITE_KING;
		else {
                }
	}
	
	public void removePiece(int col, int row, int storedCol, int storedRow){ //might be a better way to do this, but detects position of opponent piece based on destination and original position
		int pieceRow = -1; 
		int pieceCol = -1;
		if(col > storedCol && row > storedRow){
			pieceRow = row-1;
			pieceCol = col-1;
		}
		if(col > storedCol && row < storedRow){
			pieceRow = row+1;
			pieceCol = col-1;
		}
		if(col < storedCol && row > storedRow){
			pieceRow = row-1;
			pieceCol = col+1;
		}
		if(col < storedCol && row < storedRow){
			pieceRow = row+1;
			pieceCol = col+1;
		}
		gameData[pieceCol][pieceRow] = EMPTY;
	}//TODO REWRITE
	
	public void getAvailablePlays(int col, int row){
		inPlay = true;
		if((checkTeamPiece(col, row) == true)){ //checks if the piece is assigned to the current player
			if(gameData[col][row] == RED){  // only goes north, checks the row above it's own
				getUp(col, row);
			}
			if(gameData[col][row] == WHITE){ // only goes south, checks the row below it's own
				getDown(col, row);
			}
			if(gameData[col][row] == RED_KING || gameData[col][row] == WHITE_KING){ // Goes up OR down 1 row below it's own
				getUp(col, row);
			  //getUp(col, row);
				getDown(col, row); // GET UP GET UP AND GET DOWN
			}
		repaint();
		}
	}
	
	public void getUp(int col, int row){ // Get Up availability
		int rowUp = row-1;
		if(col == 0 && row != 0){ //X=0, Y is not 0
			for(int i = col; i < col+2; i++){ //check to right
				if(gameData[col][row] != 0 && gameData[i][rowUp] != 0){
					if(canJump(col, row, i, rowUp) == true){
						int jumpCol = getJumpPos(col, row, i, rowUp)[0];
						int jumpRow = getJumpPos(col, row, i, rowUp)[1];
						availablePlays[jumpCol][jumpRow] = 1;
					}
				}
				else if(baseGameData[i][rowUp] == 1 && gameData[i][rowUp] == 0)
					availablePlays[i][rowUp] = 1;
			}
		}
		else if(col == (numTilesPerRow - 1) && row != 0){ //X=max, Y is not 0
				if(gameData[col][row] != 0 && gameData[col-1][rowUp] != 0){
					if(canJump(col, row, col-1, rowUp) == true){
						int jumpCol = getJumpPos(col, row, col-1, rowUp)[0];
						int jumpRow = getJumpPos(col, row, col-1, rowUp)[1];
						availablePlays[jumpCol][jumpRow] = 1;
					}
				}
				else if(baseGameData[col-1][rowUp] == 1 && gameData[col-1][rowUp] == 0)
					availablePlays[col-1][rowUp] = 1;
		}
		else if(col != numTilesPerRow - 1 && col != 0 && row != 0){
			for(int i = col-1; i <= col+1; i++){
				if(gameData[col][row] != 0 && gameData[i][rowUp] != 0){
					if(canJump(col, row, i, rowUp) == true){
						int jumpCol = getJumpPos(col, row, i, rowUp)[0];
						int jumpRow = getJumpPos(col, row, i, rowUp)[1];
						availablePlays[jumpCol][jumpRow] = 1;
					}
				}
				else if(baseGameData[i][rowUp] == 1 && gameData[i][rowUp] == 0)
					availablePlays[i][rowUp] = 1;
			}
		}
	}
	
	public void getDown(int col, int row){
		int rowDown = row+1;
		if(col == 0 && row != numTilesPerRow-1){
				if(gameData[col][row] != 0 && gameData[col+1][rowDown] != 0){
					if(canJump(col, row, col+1, rowDown) == true){
						int jumpCol = getJumpPos(col, row, col+1, rowDown)[0];
						int jumpRow = getJumpPos(col, row, col+1, rowDown)[1];
						availablePlays[jumpCol][jumpRow] = 1;
					}
				}
				else if(baseGameData[col+1][rowDown] == 1 && gameData[col+1][rowDown] == 0)
					availablePlays[col+1][rowDown] = 1;
		}
		else if(col == numTilesPerRow - 1 && row != numTilesPerRow-1){
				if(gameData[col][row] != 0 && gameData[col-1][rowDown] != 0){
					if(canJump(col, row, col-1, rowDown) == true){
						int jumpCol = getJumpPos(col, row, col-1, rowDown)[0];
						int jumpRow = getJumpPos(col, row, col-1, rowDown)[1];
						availablePlays[jumpCol][jumpRow] = 1;
					}
				}
				else if(baseGameData[col-1][rowDown] == 1 && gameData[col-1][rowDown] == 0)
					availablePlays[col-1][rowDown] = 1;
		}
		else if(col != numTilesPerRow-1 && col != 0 && row != numTilesPerRow-1){
			for(int i = col-1; i <= col+1; i++){
				if(gameData[col][row] != 0 && gameData[i][rowDown] != 0){
					if(canJump(col, row, i, rowDown) == true){
						int jumpCol = getJumpPos(col, row, i, rowDown)[0];
						int jumpRow = getJumpPos(col, row, i, rowDown)[1];
						availablePlays[jumpCol][jumpRow] = 1;
					}
				}
				else if(baseGameData[i][rowDown] == 1 && gameData[i][rowDown] == 0)
					availablePlays[i][rowDown] = 1;
			}
		}
	}
	
	public boolean checkTeamPiece(int col, int row){
		if(currentPlayer == RED && (gameData[col][row] == RED || gameData[col][row] == RED_KING)) //bottom
			return true;
            return currentPlayer == WHITE && (gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING); //top
	}
	
	public boolean isLegalPos(int col, int row){
            return !(row < 0 || row >= numTilesPerRow || col < 0 || col >= numTilesPerRow);
	}
	
	public boolean canJump(int col, int row, int opponentCol, int opponentRow){
		//Steps for checking if canJump is true: determine piece within movement. Then check if its an opponent piece, then if the space behind it is empty
		//and in bounds
		// 4 conditions based on column and row relations to the other piece
		if(((gameData[col][row] == WHITE || gameData[col][row] == WHITE_KING) && (gameData[opponentCol][opponentRow] == RED || gameData[opponentCol][opponentRow] == RED_KING)) || (gameData[col][row] == RED || gameData[col][row] == RED_KING) && (gameData[opponentCol][opponentRow] == WHITE || gameData[opponentCol][opponentRow] == WHITE_KING)){ 
			//If the piece is white/red and opponent piece is opposite TODO fix this if. It's so ugly
			if(opponentCol == 0 || opponentCol == numTilesPerRow-1 || opponentRow == 0 || opponentRow == numTilesPerRow-1)
				return false;
			int[] toData = getJumpPos(col, row, opponentCol, opponentRow);
		    if(isLegalPos(toData[0],toData[1]) == false) //check board outofbounds
		        return false;
		    if(gameData[toData[0]][toData[1]] == 0){
		    	isJump = true;
		    	return true;
		    }
		}
		return false;
	}
	
	public int[] getJumpPos(int col, int row, int opponentCol, int opponentRow){
		if(col > opponentCol && row > opponentRow && gameData[col-2][row-2] == 0)
			return new int[] {col-2, row-2};
		else if(col > opponentCol && row < opponentRow && gameData[col-2][row+2] == 0)
			return new int[] {col-2, row+2};
		else if(col < opponentCol && row > opponentRow && gameData[col+2][row-2] == 0)
			return new int[] {col+2, row-2};
		else
			return new int[] {col+2, row+2};
	}
	
	// Methods that must be included for some reason? WHY
        @Override
	public void mouseClicked(MouseEvent e) {}
        @Override
	public void mouseReleased(MouseEvent e) {}
        @Override
	public void mouseEntered(MouseEvent e) {}
        @Override
	public void mouseExited(MouseEvent e) {}

}
